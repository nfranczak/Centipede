Part II contains all the relevant code to 'contact' the centipede and feed it inputs given from csv2motor.py, along with a
model that is able to interpret the inputs and output the appropriate motor velocity and stall.
The intuition for the model is as follows. 
Let a be a function such that a: attack -> velocity
Let b         ''              b: release -> stall
we then can say that:
c: (attack x release) -> (velocity x stall)
&
d: (note x attack x release) -> (motor x velcity x stall)

Training loop:
input: (attack, release) for a note
        nn produces a (vel, stall) pair
       (vel, stall) fed into arduino and executed by a servo motor
        produced soundwave is redorded for amplitude and duration
        loss is measured
        nn refines itself
        until the loss is below a certain thershold, lines 13-17 repeat.
        once the threshold is met, the nn is fed another (a,r)
                the (attack, release, note) is then added to an R3 graph
                    (velocity, stall, motor)    ''           a different R3 graph
