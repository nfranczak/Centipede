Currently, part II contains code that trains the centipede
A CSV file of csv2motor.py gets fed into finger.py

First the model checks if the given (note, attack, release) pair have already been approximated by the model with the lookup.py program

If not the model predicts a value for the corresponding motor's velocity and stall
* velocity corresponds to the attack *
* stall corresponds to the release *
The predicted (velocity, stall) get fed to the centipede with the ardu_comm.py program
At the same time the audyoo.py program is ran
The audyoo.py program records the attack and release that the velocity and stall produced
The loss is calculated between the produced (attack, release) and the desired (attack, release)
Until the loss is below a certain threshold the model keeps predicting (velocity, stall) values
Once the loss is below the threshold, the (velocity, stall, motor) values get added to a database with adder.py

visulizer.py can show the contents of the database in R3

